<?php


/**
 * Base class that represents a query for the 'observation_photo' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.6 on:
 *
 * Mon Feb 20 16:38:40 2012
 *
 * @method     ObservationPhotoQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     ObservationPhotoQuery orderByCode($order = Criteria::ASC) Order by the code column
 * @method     ObservationPhotoQuery orderByIndividualId($order = Criteria::ASC) Order by the individual_id column
 * @method     ObservationPhotoQuery orderBySpecieId($order = Criteria::ASC) Order by the specie_id column
 * @method     ObservationPhotoQuery orderByIsland($order = Criteria::ASC) Order by the island column
 * @method     ObservationPhotoQuery orderByFinSide($order = Criteria::ASC) Order by the fin_side column
 * @method     ObservationPhotoQuery orderByLatitude($order = Criteria::ASC) Order by the latitude column
 * @method     ObservationPhotoQuery orderByLongitude($order = Criteria::ASC) Order by the longitude column
 * @method     ObservationPhotoQuery orderByCompany($order = Criteria::ASC) Order by the company column
 * @method     ObservationPhotoQuery orderByPhotographer($order = Criteria::ASC) Order by the photographer column
 * @method     ObservationPhotoQuery orderByPhotographerEmail($order = Criteria::ASC) Order by the photographer_email column
 * @method     ObservationPhotoQuery orderByKindOfPhoto($order = Criteria::ASC) Order by the kind_of_photo column
 * @method     ObservationPhotoQuery orderByPhotoQuality($order = Criteria::ASC) Order by the photo_quality column
 * @method     ObservationPhotoQuery orderByObservationDate($order = Criteria::ASC) Order by the observation_date column
 * @method     ObservationPhotoQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method     ObservationPhotoQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 *
 * @method     ObservationPhotoQuery groupById() Group by the id column
 * @method     ObservationPhotoQuery groupByCode() Group by the code column
 * @method     ObservationPhotoQuery groupByIndividualId() Group by the individual_id column
 * @method     ObservationPhotoQuery groupBySpecieId() Group by the specie_id column
 * @method     ObservationPhotoQuery groupByIsland() Group by the island column
 * @method     ObservationPhotoQuery groupByFinSide() Group by the fin_side column
 * @method     ObservationPhotoQuery groupByLatitude() Group by the latitude column
 * @method     ObservationPhotoQuery groupByLongitude() Group by the longitude column
 * @method     ObservationPhotoQuery groupByCompany() Group by the company column
 * @method     ObservationPhotoQuery groupByPhotographer() Group by the photographer column
 * @method     ObservationPhotoQuery groupByPhotographerEmail() Group by the photographer_email column
 * @method     ObservationPhotoQuery groupByKindOfPhoto() Group by the kind_of_photo column
 * @method     ObservationPhotoQuery groupByPhotoQuality() Group by the photo_quality column
 * @method     ObservationPhotoQuery groupByObservationDate() Group by the observation_date column
 * @method     ObservationPhotoQuery groupByCreatedAt() Group by the created_at column
 * @method     ObservationPhotoQuery groupByUpdatedAt() Group by the updated_at column
 *
 * @method     ObservationPhotoQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     ObservationPhotoQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     ObservationPhotoQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     ObservationPhotoQuery leftJoinIndividual($relationAlias = null) Adds a LEFT JOIN clause to the query using the Individual relation
 * @method     ObservationPhotoQuery rightJoinIndividual($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Individual relation
 * @method     ObservationPhotoQuery innerJoinIndividual($relationAlias = null) Adds a INNER JOIN clause to the query using the Individual relation
 *
 * @method     ObservationPhotoQuery leftJoinSpecie($relationAlias = null) Adds a LEFT JOIN clause to the query using the Specie relation
 * @method     ObservationPhotoQuery rightJoinSpecie($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Specie relation
 * @method     ObservationPhotoQuery innerJoinSpecie($relationAlias = null) Adds a INNER JOIN clause to the query using the Specie relation
 *
 * @method     ObservationPhotoQuery leftJoinObservationPhotoI18n($relationAlias = null) Adds a LEFT JOIN clause to the query using the ObservationPhotoI18n relation
 * @method     ObservationPhotoQuery rightJoinObservationPhotoI18n($relationAlias = null) Adds a RIGHT JOIN clause to the query using the ObservationPhotoI18n relation
 * @method     ObservationPhotoQuery innerJoinObservationPhotoI18n($relationAlias = null) Adds a INNER JOIN clause to the query using the ObservationPhotoI18n relation
 *
 * @method     ObservationPhotoQuery leftJoinObservationPhotoMarkTail($relationAlias = null) Adds a LEFT JOIN clause to the query using the ObservationPhotoMarkTail relation
 * @method     ObservationPhotoQuery rightJoinObservationPhotoMarkTail($relationAlias = null) Adds a RIGHT JOIN clause to the query using the ObservationPhotoMarkTail relation
 * @method     ObservationPhotoQuery innerJoinObservationPhotoMarkTail($relationAlias = null) Adds a INNER JOIN clause to the query using the ObservationPhotoMarkTail relation
 *
 * @method     ObservationPhotoQuery leftJoinObservationPhotoMarkDorsalLeft($relationAlias = null) Adds a LEFT JOIN clause to the query using the ObservationPhotoMarkDorsalLeft relation
 * @method     ObservationPhotoQuery rightJoinObservationPhotoMarkDorsalLeft($relationAlias = null) Adds a RIGHT JOIN clause to the query using the ObservationPhotoMarkDorsalLeft relation
 * @method     ObservationPhotoQuery innerJoinObservationPhotoMarkDorsalLeft($relationAlias = null) Adds a INNER JOIN clause to the query using the ObservationPhotoMarkDorsalLeft relation
 *
 * @method     ObservationPhotoQuery leftJoinObservationPhotoMarkDorsalRight($relationAlias = null) Adds a LEFT JOIN clause to the query using the ObservationPhotoMarkDorsalRight relation
 * @method     ObservationPhotoQuery rightJoinObservationPhotoMarkDorsalRight($relationAlias = null) Adds a RIGHT JOIN clause to the query using the ObservationPhotoMarkDorsalRight relation
 * @method     ObservationPhotoQuery innerJoinObservationPhotoMarkDorsalRight($relationAlias = null) Adds a INNER JOIN clause to the query using the ObservationPhotoMarkDorsalRight relation
 *
 * @method     ObservationPhoto findOne(PropelPDO $con = null) Return the first ObservationPhoto matching the query
 * @method     ObservationPhoto findOneOrCreate(PropelPDO $con = null) Return the first ObservationPhoto matching the query, or a new ObservationPhoto object populated from the query conditions when no match is found
 *
 * @method     ObservationPhoto findOneById(int $id) Return the first ObservationPhoto filtered by the id column
 * @method     ObservationPhoto findOneByCode(string $code) Return the first ObservationPhoto filtered by the code column
 * @method     ObservationPhoto findOneByIndividualId(int $individual_id) Return the first ObservationPhoto filtered by the individual_id column
 * @method     ObservationPhoto findOneBySpecieId(int $specie_id) Return the first ObservationPhoto filtered by the specie_id column
 * @method     ObservationPhoto findOneByIsland(string $island) Return the first ObservationPhoto filtered by the island column
 * @method     ObservationPhoto findOneByFinSide(string $fin_side) Return the first ObservationPhoto filtered by the fin_side column
 * @method     ObservationPhoto findOneByLatitude(string $latitude) Return the first ObservationPhoto filtered by the latitude column
 * @method     ObservationPhoto findOneByLongitude(string $longitude) Return the first ObservationPhoto filtered by the longitude column
 * @method     ObservationPhoto findOneByCompany(string $company) Return the first ObservationPhoto filtered by the company column
 * @method     ObservationPhoto findOneByPhotographer(string $photographer) Return the first ObservationPhoto filtered by the photographer column
 * @method     ObservationPhoto findOneByPhotographerEmail(string $photographer_email) Return the first ObservationPhoto filtered by the photographer_email column
 * @method     ObservationPhoto findOneByKindOfPhoto(string $kind_of_photo) Return the first ObservationPhoto filtered by the kind_of_photo column
 * @method     ObservationPhoto findOneByPhotoQuality(string $photo_quality) Return the first ObservationPhoto filtered by the photo_quality column
 * @method     ObservationPhoto findOneByObservationDate(string $observation_date) Return the first ObservationPhoto filtered by the observation_date column
 * @method     ObservationPhoto findOneByCreatedAt(string $created_at) Return the first ObservationPhoto filtered by the created_at column
 * @method     ObservationPhoto findOneByUpdatedAt(string $updated_at) Return the first ObservationPhoto filtered by the updated_at column
 *
 * @method     array findById(int $id) Return ObservationPhoto objects filtered by the id column
 * @method     array findByCode(string $code) Return ObservationPhoto objects filtered by the code column
 * @method     array findByIndividualId(int $individual_id) Return ObservationPhoto objects filtered by the individual_id column
 * @method     array findBySpecieId(int $specie_id) Return ObservationPhoto objects filtered by the specie_id column
 * @method     array findByIsland(string $island) Return ObservationPhoto objects filtered by the island column
 * @method     array findByFinSide(string $fin_side) Return ObservationPhoto objects filtered by the fin_side column
 * @method     array findByLatitude(string $latitude) Return ObservationPhoto objects filtered by the latitude column
 * @method     array findByLongitude(string $longitude) Return ObservationPhoto objects filtered by the longitude column
 * @method     array findByCompany(string $company) Return ObservationPhoto objects filtered by the company column
 * @method     array findByPhotographer(string $photographer) Return ObservationPhoto objects filtered by the photographer column
 * @method     array findByPhotographerEmail(string $photographer_email) Return ObservationPhoto objects filtered by the photographer_email column
 * @method     array findByKindOfPhoto(string $kind_of_photo) Return ObservationPhoto objects filtered by the kind_of_photo column
 * @method     array findByPhotoQuality(string $photo_quality) Return ObservationPhoto objects filtered by the photo_quality column
 * @method     array findByObservationDate(string $observation_date) Return ObservationPhoto objects filtered by the observation_date column
 * @method     array findByCreatedAt(string $created_at) Return ObservationPhoto objects filtered by the created_at column
 * @method     array findByUpdatedAt(string $updated_at) Return ObservationPhoto objects filtered by the updated_at column
 *
 * @package    propel.generator.plugins.photoRepoPlugin.lib.model.om
 */
abstract class BaseObservationPhotoQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BaseObservationPhotoQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'ObservationPhoto', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new ObservationPhotoQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    ObservationPhotoQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof ObservationPhotoQuery) {
			return $criteria;
		}
		$query = new ObservationPhotoQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    ObservationPhoto|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = ObservationPhotoPeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{	
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(ObservationPhotoPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(ObservationPhotoPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * @param     int|array $id The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(ObservationPhotoPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the code column
	 * 
	 * @param     string $code The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function filterByCode($code = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($code)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $code)) {
				$code = str_replace('*', '%', $code);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ObservationPhotoPeer::CODE, $code, $comparison);
	}

	/**
	 * Filter the query on the individual_id column
	 * 
	 * @param     int|array $individualId The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function filterByIndividualId($individualId = null, $comparison = null)
	{
		if (is_array($individualId)) {
			$useMinMax = false;
			if (isset($individualId['min'])) {
				$this->addUsingAlias(ObservationPhotoPeer::INDIVIDUAL_ID, $individualId['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($individualId['max'])) {
				$this->addUsingAlias(ObservationPhotoPeer::INDIVIDUAL_ID, $individualId['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ObservationPhotoPeer::INDIVIDUAL_ID, $individualId, $comparison);
	}

	/**
	 * Filter the query on the specie_id column
	 * 
	 * @param     int|array $specieId The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function filterBySpecieId($specieId = null, $comparison = null)
	{
		if (is_array($specieId)) {
			$useMinMax = false;
			if (isset($specieId['min'])) {
				$this->addUsingAlias(ObservationPhotoPeer::SPECIE_ID, $specieId['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($specieId['max'])) {
				$this->addUsingAlias(ObservationPhotoPeer::SPECIE_ID, $specieId['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ObservationPhotoPeer::SPECIE_ID, $specieId, $comparison);
	}

	/**
	 * Filter the query on the island column
	 * 
	 * @param     string $island The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function filterByIsland($island = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($island)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $island)) {
				$island = str_replace('*', '%', $island);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ObservationPhotoPeer::ISLAND, $island, $comparison);
	}

	/**
	 * Filter the query on the fin_side column
	 * 
	 * @param     string $finSide The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function filterByFinSide($finSide = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($finSide)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $finSide)) {
				$finSide = str_replace('*', '%', $finSide);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ObservationPhotoPeer::FIN_SIDE, $finSide, $comparison);
	}

	/**
	 * Filter the query on the latitude column
	 * 
	 * @param     string $latitude The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function filterByLatitude($latitude = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($latitude)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $latitude)) {
				$latitude = str_replace('*', '%', $latitude);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ObservationPhotoPeer::LATITUDE, $latitude, $comparison);
	}

	/**
	 * Filter the query on the longitude column
	 * 
	 * @param     string $longitude The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function filterByLongitude($longitude = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($longitude)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $longitude)) {
				$longitude = str_replace('*', '%', $longitude);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ObservationPhotoPeer::LONGITUDE, $longitude, $comparison);
	}

	/**
	 * Filter the query on the company column
	 * 
	 * @param     string $company The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function filterByCompany($company = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($company)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $company)) {
				$company = str_replace('*', '%', $company);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ObservationPhotoPeer::COMPANY, $company, $comparison);
	}

	/**
	 * Filter the query on the photographer column
	 * 
	 * @param     string $photographer The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function filterByPhotographer($photographer = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($photographer)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $photographer)) {
				$photographer = str_replace('*', '%', $photographer);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ObservationPhotoPeer::PHOTOGRAPHER, $photographer, $comparison);
	}

	/**
	 * Filter the query on the photographer_email column
	 * 
	 * @param     string $photographerEmail The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function filterByPhotographerEmail($photographerEmail = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($photographerEmail)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $photographerEmail)) {
				$photographerEmail = str_replace('*', '%', $photographerEmail);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ObservationPhotoPeer::PHOTOGRAPHER_EMAIL, $photographerEmail, $comparison);
	}

	/**
	 * Filter the query on the kind_of_photo column
	 * 
	 * @param     string $kindOfPhoto The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function filterByKindOfPhoto($kindOfPhoto = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($kindOfPhoto)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $kindOfPhoto)) {
				$kindOfPhoto = str_replace('*', '%', $kindOfPhoto);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ObservationPhotoPeer::KIND_OF_PHOTO, $kindOfPhoto, $comparison);
	}

	/**
	 * Filter the query on the photo_quality column
	 * 
	 * @param     string $photoQuality The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function filterByPhotoQuality($photoQuality = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($photoQuality)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $photoQuality)) {
				$photoQuality = str_replace('*', '%', $photoQuality);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ObservationPhotoPeer::PHOTO_QUALITY, $photoQuality, $comparison);
	}

	/**
	 * Filter the query on the observation_date column
	 * 
	 * @param     string|array $observationDate The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function filterByObservationDate($observationDate = null, $comparison = null)
	{
		if (is_array($observationDate)) {
			$useMinMax = false;
			if (isset($observationDate['min'])) {
				$this->addUsingAlias(ObservationPhotoPeer::OBSERVATION_DATE, $observationDate['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($observationDate['max'])) {
				$this->addUsingAlias(ObservationPhotoPeer::OBSERVATION_DATE, $observationDate['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ObservationPhotoPeer::OBSERVATION_DATE, $observationDate, $comparison);
	}

	/**
	 * Filter the query on the created_at column
	 * 
	 * @param     string|array $createdAt The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function filterByCreatedAt($createdAt = null, $comparison = null)
	{
		if (is_array($createdAt)) {
			$useMinMax = false;
			if (isset($createdAt['min'])) {
				$this->addUsingAlias(ObservationPhotoPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($createdAt['max'])) {
				$this->addUsingAlias(ObservationPhotoPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ObservationPhotoPeer::CREATED_AT, $createdAt, $comparison);
	}

	/**
	 * Filter the query on the updated_at column
	 * 
	 * @param     string|array $updatedAt The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function filterByUpdatedAt($updatedAt = null, $comparison = null)
	{
		if (is_array($updatedAt)) {
			$useMinMax = false;
			if (isset($updatedAt['min'])) {
				$this->addUsingAlias(ObservationPhotoPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($updatedAt['max'])) {
				$this->addUsingAlias(ObservationPhotoPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ObservationPhotoPeer::UPDATED_AT, $updatedAt, $comparison);
	}

	/**
	 * Filter the query by a related Individual object
	 *
	 * @param     Individual $individual  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function filterByIndividual($individual, $comparison = null)
	{
		return $this
			->addUsingAlias(ObservationPhotoPeer::INDIVIDUAL_ID, $individual->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Individual relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function joinIndividual($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Individual');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Individual');
		}
		
		return $this;
	}

	/**
	 * Use the Individual relation Individual object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    IndividualQuery A secondary query class using the current class as primary query
	 */
	public function useIndividualQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinIndividual($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Individual', 'IndividualQuery');
	}

	/**
	 * Filter the query by a related Specie object
	 *
	 * @param     Specie $specie  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function filterBySpecie($specie, $comparison = null)
	{
		return $this
			->addUsingAlias(ObservationPhotoPeer::SPECIE_ID, $specie->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Specie relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function joinSpecie($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Specie');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Specie');
		}
		
		return $this;
	}

	/**
	 * Use the Specie relation Specie object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    SpecieQuery A secondary query class using the current class as primary query
	 */
	public function useSpecieQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinSpecie($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Specie', 'SpecieQuery');
	}

	/**
	 * Filter the query by a related ObservationPhotoI18n object
	 *
	 * @param     ObservationPhotoI18n $observationPhotoI18n  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function filterByObservationPhotoI18n($observationPhotoI18n, $comparison = null)
	{
		return $this
			->addUsingAlias(ObservationPhotoPeer::ID, $observationPhotoI18n->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the ObservationPhotoI18n relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function joinObservationPhotoI18n($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('ObservationPhotoI18n');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'ObservationPhotoI18n');
		}
		
		return $this;
	}

	/**
	 * Use the ObservationPhotoI18n relation ObservationPhotoI18n object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ObservationPhotoI18nQuery A secondary query class using the current class as primary query
	 */
	public function useObservationPhotoI18nQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinObservationPhotoI18n($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'ObservationPhotoI18n', 'ObservationPhotoI18nQuery');
	}

	/**
	 * Filter the query by a related ObservationPhotoMarkTail object
	 *
	 * @param     ObservationPhotoMarkTail $observationPhotoMarkTail  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function filterByObservationPhotoMarkTail($observationPhotoMarkTail, $comparison = null)
	{
		return $this
			->addUsingAlias(ObservationPhotoPeer::ID, $observationPhotoMarkTail->getPhotoId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the ObservationPhotoMarkTail relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function joinObservationPhotoMarkTail($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('ObservationPhotoMarkTail');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'ObservationPhotoMarkTail');
		}
		
		return $this;
	}

	/**
	 * Use the ObservationPhotoMarkTail relation ObservationPhotoMarkTail object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ObservationPhotoMarkTailQuery A secondary query class using the current class as primary query
	 */
	public function useObservationPhotoMarkTailQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinObservationPhotoMarkTail($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'ObservationPhotoMarkTail', 'ObservationPhotoMarkTailQuery');
	}

	/**
	 * Filter the query by a related ObservationPhotoMarkDorsalLeft object
	 *
	 * @param     ObservationPhotoMarkDorsalLeft $observationPhotoMarkDorsalLeft  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function filterByObservationPhotoMarkDorsalLeft($observationPhotoMarkDorsalLeft, $comparison = null)
	{
		return $this
			->addUsingAlias(ObservationPhotoPeer::ID, $observationPhotoMarkDorsalLeft->getPhotoId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the ObservationPhotoMarkDorsalLeft relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function joinObservationPhotoMarkDorsalLeft($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('ObservationPhotoMarkDorsalLeft');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'ObservationPhotoMarkDorsalLeft');
		}
		
		return $this;
	}

	/**
	 * Use the ObservationPhotoMarkDorsalLeft relation ObservationPhotoMarkDorsalLeft object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ObservationPhotoMarkDorsalLeftQuery A secondary query class using the current class as primary query
	 */
	public function useObservationPhotoMarkDorsalLeftQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinObservationPhotoMarkDorsalLeft($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'ObservationPhotoMarkDorsalLeft', 'ObservationPhotoMarkDorsalLeftQuery');
	}

	/**
	 * Filter the query by a related ObservationPhotoMarkDorsalRight object
	 *
	 * @param     ObservationPhotoMarkDorsalRight $observationPhotoMarkDorsalRight  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function filterByObservationPhotoMarkDorsalRight($observationPhotoMarkDorsalRight, $comparison = null)
	{
		return $this
			->addUsingAlias(ObservationPhotoPeer::ID, $observationPhotoMarkDorsalRight->getPhotoId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the ObservationPhotoMarkDorsalRight relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function joinObservationPhotoMarkDorsalRight($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('ObservationPhotoMarkDorsalRight');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'ObservationPhotoMarkDorsalRight');
		}
		
		return $this;
	}

	/**
	 * Use the ObservationPhotoMarkDorsalRight relation ObservationPhotoMarkDorsalRight object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ObservationPhotoMarkDorsalRightQuery A secondary query class using the current class as primary query
	 */
	public function useObservationPhotoMarkDorsalRightQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinObservationPhotoMarkDorsalRight($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'ObservationPhotoMarkDorsalRight', 'ObservationPhotoMarkDorsalRightQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     ObservationPhoto $observationPhoto Object to remove from the list of results
	 *
	 * @return    ObservationPhotoQuery The current query, for fluid interface
	 */
	public function prune($observationPhoto = null)
	{
		if ($observationPhoto) {
			$this->addUsingAlias(ObservationPhotoPeer::ID, $observationPhoto->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

} // BaseObservationPhotoQuery

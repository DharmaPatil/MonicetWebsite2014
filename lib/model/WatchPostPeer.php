<?php


/**
 * Skeleton subclass for performing query and update operations on the 'watch_post' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.0-dev on:
 *
 * Fri Oct 28 19:07:04 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.lib.model
 */
class WatchPostPeer extends BaseWatchPostPeer {
	public static function doSelectListByCompany() {
        $user = sfContext::getInstance()->getUser()->getGuardUser();
        $company = CompanyPeer::doSelectUserCompany($user->getId());
        $c = new Criteria();
        if ($company) {
            $c->add(WatchPostPeer::COMPANY_ID, $company->getId(), Criteria::EQUAL);
        }
        return mfUtils::fromObjectsToArrayWithEmpty(self::doSelect($c));
    }

    public static function doSelectByCompany() {
        $user = sfContext::getInstance()->getUser()->getGuardUser();
        $company = CompanyPeer::doSelectUserCompany($user->getId());
        if ($company) {
            $query = WatchPostQuery::create()
                ->filterByCompanyId($company->getId())
                ->paginate();
        } else {
            $query = WatchPostQuery::create()
                ->paginate();
        }
        return $query;
    }
	
	public static function getWatchPostByNome($nome){
      $c = new Criteria();
      $c->add(WatchPostPeer::NAME, $nome, Criteria::LIKE);
      $s = WatchPostPeer::doSelect($c);
      if(count($s)){
        return $s[0];
      }
      else{
        return false;
      }
    }
	
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
    {
      $user = sfContext::getInstance()->getUser()->getGuardUser();
      $company = CompanyPeer::doSelectUserCompany($user->getId());
      if ($company) {
          $criteria->addAnd(WatchPostPeer::COMPANY_ID, $company->getId(), Criteria::EQUAL);
      }
      $criteria->addJoin(WatchPostPeer::COMPANY_ID, CompanyPeer::ID, Criteria::LEFT_JOIN);
      
      $criteria->addAscendingOrderByColumn(CompanyPeer::NAME);
      $criteria->addAscendingOrderByColumn(WatchPostPeer::NAME);
      return WatchPostPeer::populateObjects(WatchPostPeer::doSelectStmt($criteria, $con));
    }
    
    
    public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
    {
      return count(WatchPostPeer::doSelect($criteria));
    }
	
} // WatchPostPeer

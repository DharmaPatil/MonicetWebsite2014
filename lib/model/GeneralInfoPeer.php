<?php


/**
 * Skeleton subclass for performing query and update operations on the 'general_info' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.0 on:
 *
 * Fri Dec 18 17:25:55 2009
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class GeneralInfoPeer extends BaseGeneralInfoPeer {
    
    /**
     * Method to do selects. (BACKEND)
     *
     * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
     * @param      PropelPDO $con
     * @return     array Array of selected Objects
     * @throws     PropelException Any exceptions caught during processing will be
     *       rethrown wrapped into a PropelException.
     */
    public static function doSelectByCompany(Criteria $criteria, PropelPDO $con = null)
    {
        if(sfContext::getInstance()->getUser()->isAuthenticated()) {
            $user = sfContext::getInstance()->getUser()->getGuardUser();
            $company = CompanyPeer::doSelectUserCompany($user->getId());
            if ($company) {
                $criteria->addAnd(GeneralInfoPeer::COMPANY_ID, $company->getId(), Criteria::EQUAL);    
            }
        }
        
        return parent::doSelect($criteria, $con);
    }
    
    /**
     * Returns the number of rows matching criteria. (BACKEND)
     *
     * @param      Criteria $criteria
     * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
     * @param      PropelPDO $con
     * @return     int Number of matching rows.
     */
    public static function doCountByCompany(Criteria $criteria, $distinct = false, PropelPDO $con = null)
    {
        if(sfContext::getInstance()->getUser()->isAuthenticated()) {
            $user = sfContext::getInstance()->getUser()->getGuardUser();
            $company = CompanyPeer::doSelectUserCompany($user->getId());
            if ($company) {
                $criteria->addAnd(GeneralInfoPeer::COMPANY_ID, $company->getId(), Criteria::EQUAL);    
            }
        }
        
        return parent::doCount($criteria, $distinct, $con);
    }
    
	public static function doSelectForPublicList($request=null) {
      
        $request = (! is_null($request) && $request instanceof sfWebRequest) ? $request : sfContext::getInstance()->getRequest();
      	
        $query = GeneralInfoQuery::create()
            ->filterByValid(true);
        //$ordem = 'GeneralInfoPeer::'.strtoupper($request->getParameter('sort', 'valid'));
        $query = $query
            ->orderBy(mfText::to_camel_case($request->getParameter('sort', 'valid'), true), $request->getParameter('order', 'desc'))
            //->addDescendingOrderByColumn($ordem)
        ->paginate($request->getParameter('page', 1), 20);
        return $query;
    }

  public static function getTotalForPeriod($type, $year, $month, $company_id = 0) {
    if( !$month || $month == 0 ){
      $dateBegin = $year.'-01-01';
      $dateEnd = ($year+1).'-01-01';
    } else {
      $dateBegin = $year.'-'.$month.'-01';
      $dateEnd = $year.'-'.($month+1).'-01';
      if($month==12){
        $dateEnd = ($year+1).'-01-01';
      }
    }
    $query = GeneralInfoQuery::create()
            ->filterByValid(true)
            ->filterByDate($dateBegin, Criteria::GREATER_EQUAL)
            ->filterByDate($dateEnd, Criteria::LESS_THAN);
            if ($company_id != 0) {
              $query->where('GeneralInfo.CompanyId = ?', $company_id);
            }
    return $query->count();
            
//    $date1 = $year."-";
//    $date2 = $year."-";  
//    //if (($type == '1') && $month) {
//    if ($month) {
//        $date1 .= $month."-1";
//        $date2 .= $month."-" . idate('d', mktime(0, 0, 0, ($month + 1), 0, $year)); 
//    } else {
//        $date1 .= "1-1";
//        $date2 .= "12-31";
//    }
//    //TODO refactor
//    $c = new Criteria();
//    $c->addAnd(GeneralInfoPeer::VALID, true, Criteria::EQUAL);
//    $c->addAnd(GeneralInfoPeer::DATE, $date1, Criteria::GREATER_EQUAL);
//    $c->addAnd(GeneralInfoPeer::DATE, $date2, Criteria::LESS_EQUAL);
//
//    return GeneralInfoPeer::doCount($c);
  }
  
  public static function doSelectByPeriod($year = 0, $month = 0) {
  	
    $c = new Criteria();
    $c0 = $c->getNewCriterion(GeneralInfoPeer::VALID, true, Criteria::EQUAL);
    
    if ($month) {
      
      if ($month < 10) $month = '0'.$month;
      
      if ($year) {
        // Year
        $date1 = $year."-";
        $date2 = $year."-";
        
        // Month
        $date1 .= ($month)? $month."-01" : "01-01" ;
        $date2 .= ($month)? $month."-".idate('d', mktime(0, 0, 0, ($month - 1), 0, $year)) : "12-31" ;
        
        $c1 = $c->getNewCriterion(GeneralInfoPeer::DATE, $date1, Criteria::GREATER_EQUAL);
        $c2 = $c->getNewCriterion(GeneralInfoPeer::DATE, $date2, Criteria::LESS_EQUAL);
        $c0->addAnd($c1);
        $c0->addAnd($c2);
      }
      else {
        $years = array();
        for ($temp_year = GeneralInfoPeer::getFirstYear(); $temp_year <= GeneralInfoPeer::getLastYear(); $temp_year++) {
          $temp = $temp_year.'-'.$month.'-%';
          $years[] = $c->getNewCriterion(GeneralInfoPeer::DATE, $temp_year.'-'.$month.'-%', Criteria::LIKE);
        }
        
        if (count($years) > 1) {
          for ( $i = 1; $i < count($years); $i++) {
            $years[0]->addOr($years[$i]);
          }
        }
        
        $c0->addAnd($years[0]);
      }
    }
    else {
      // Year
      $date1 = ($year)? $year."-" : GeneralInfoPeer::getFirstYear()."-" ;
      $date2 = ($year)? $year."-" : GeneralInfoPeer::getLastYear()."-" ;
      
      // Month & Day
      $date1 .= "01-01";
      $date2 .= "12-31";
      
      $c1 = $c->getNewCriterion(GeneralInfoPeer::DATE, $date1, Criteria::GREATER_EQUAL);
      $c2 = $c->getNewCriterion(GeneralInfoPeer::DATE, $date2, Criteria::LESS_EQUAL);
      $c0->addAnd($c1);
      $c0->addAnd($c2);
    }
    
    $c->addAnd($c0);
    
    return GeneralInfoPeer::doSelect($c);
  }
  
  public static function countForSpecieOnMonth($specieId, $year, $month = null, $company_id = 0){
    if( !$month || $month == 0){
      $dateBegin = $year.'-01-01';
      $dateEnd = ($year+1).'-01-01';
    } else {
      $dateBegin = $year.'-'.$month.'-01';
      $dateEnd = $year.'-'.($month+1).'-01';
      if($month==12){
        $dateEnd = ($year+1).'-01-01';
      }
    }
    $query = GeneralInfoQuery::create()
            ->filterByDate($dateBegin, Criteria::GREATER_EQUAL)
            ->filterByDate($dateEnd, Criteria::LESS_THAN)
            ->filterByValid(true)
            ->useRecordQuery()
              ->useSightingQuery()
                ->filterBySpecieId($specieId)
              ->endUse()
            ->endUse()
            ->distinct();
            if ($company_id != 0) {
              $query->where('GeneralInfo.CompanyId = ?', $company_id);
            }
    return $query->count();
  }
  
  public static function getFirstYear() {
    $c = new Criteria();
    $c->addAscendingOrderByColumn(GeneralInfoPeer::DATE);
    $firstGI = GeneralInfoPeer::doSelectOne($c);
    $explodedFirstDate = explode('-', $firstGI->getDate());
    $firstYear = $explodedFirstDate[0];
    
    return $firstYear;
  }
  
  public static function getLastYear() {
    $c = new Criteria();
    $c->addDescendingOrderByColumn(GeneralInfoPeer::DATE);
    $lastGI = GeneralInfoPeer::doSelectOne($c);
    $explodedLastDate = explode('-', $lastGI->getDate());
    $lastYear = $explodedLastDate[0];
    
    return $lastYear;
  }
  
} // GeneralInfoPeer





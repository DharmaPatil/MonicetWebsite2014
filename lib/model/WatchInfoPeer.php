<?php


/**
 * Skeleton subclass for performing query and update operations on the 'watch_info' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.0-dev on:
 *
 * Wed Oct 19 17:11:57 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.lib.model
 */
class WatchInfoPeer extends BaseWatchInfoPeer {
	/**
     * Method to do selects. (BACKEND)
     *
     * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
     * @param      PropelPDO $con
     * @return     array Array of selected Objects
     * @throws     PropelException Any exceptions caught during processing will be
     *       rethrown wrapped into a PropelException.
     */
    public static function doSelectByCompany(Criteria $criteria, PropelPDO $con = null)
    {
        if(sfContext::getInstance()->getUser()->isAuthenticated()) {
            $user = sfContext::getInstance()->getUser()->getGuardUser();
            $company = CompanyPeer::doSelectUserCompany($user->getId());
            if ($company) {
                $criteria->addAnd(WatchInfoPeer::COMPANY_ID, $company->getId(), Criteria::EQUAL);
            }
        }
        
        return parent::doSelect($criteria, $con);
    }
    
    /**
     * Returns the number of rows matching criteria. (BACKEND)
     *
     * @param      Criteria $criteria
     * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
     * @param      PropelPDO $con
     * @return     int Number of matching rows.
     */
    public static function doCountByCompany(Criteria $criteria, $distinct = false, PropelPDO $con = null)
    {
        if(sfContext::getInstance()->getUser()->isAuthenticated()) {
            $user = sfContext::getInstance()->getUser()->getGuardUser();
            $company = CompanyPeer::doSelectUserCompany($user->getId());
            if ($company) {
                $criteria->addAnd(WatchInfoPeer::COMPANY_ID, $company->getId(), Criteria::EQUAL);
            }
        }
        
        return parent::doCount($criteria, $distinct, $con);
    }
    
	public static function doSelectForPublicList($request=null) {
      
        $request = (! is_null($request) && $request instanceof sfWebRequest) ? $request : sfContext::getInstance()->getRequest();
      	
        $query = WatchInfoQuery::create()
            ->filterByValid(true);
        //$ordem = 'GeneralInfoPeer::'.strtoupper($request->getParameter('sort', 'valid'));
        $query = $query
            ->orderBy(mfText::to_camel_case($request->getParameter('sort', 'valid'), true), $request->getParameter('order', 'desc'))
            //->addDescendingOrderByColumn($ordem)
        ->paginate($request->getParameter('page', 1), 20);
        return $query;
    }

  public static function getTotalForPeriod($type, $year, $month) {
    $date1 = $year."-";
    $date2 = $year."-";  
    //if (($type == '1') && $month) {
    if ($month) {
        $date1 .= $month."-1";
        $date2 .= $month."-" . idate('d', mktime(0, 0, 0, ($month + 1), 0, $year)); 
    } else {
        $date1 .= "1-1";
        $date2 .= "12-31";
    }
    //TODO refactor
    $c = new Criteria();
    $c->addAnd(WatchInfoPeer::VALID, true, Criteria::EQUAL);
    $c->addAnd(WatchInfoPeer::DATE, $date1, Criteria::GREATER_EQUAL);
    $c->addAnd(WatchInfoPeer::DATE, $date2, Criteria::LESS_EQUAL);

    return WatchInfoPeer::doCount($c);
  }
} // WatchInfoPeer

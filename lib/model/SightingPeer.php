<?php


/**
 * Skeleton subclass for performing query and update operations on the 'sighting' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.0 on:
 *
 * Fri Dec 18 17:25:56 2009
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class SightingPeer extends BaseSightingPeer {
  
  public static function getSightingsForSelect($date, $with_empty = true, $empty_msg = '', $empty_code = ''){
    $objectos = SightingQuery::create()
      ->useRecordQuery()
        ->useGeneralInfoQuery()
          ->filterByDate($date)
          ->orderById()
        ->endUse()
        ->orderByTime()
      ->endUse()
      ->find();
    
    if($with_empty) {
      return self::fromObjectosToArray($objectos, $empty=true, $empty_msg, $empty_code);
    } 
    return self::fromObjectosToArray($objectos, $empty=false, $empty_msg, $empty_code);
  }
  
  public static function fromObjectosToArray( $objectos, $empty = false, $empty_msg = 'Todas', $empty_code = '' ) {
    $resultados = array();
    if( $empty ) {
      $resultados[$empty_code] = '---'.$empty_msg.'---';
    }
    foreach( $objectos as $objecto ) {
      $record = $objecto->getRecord();
      $gi = $record->getGeneralInfo();
      $resultados[$objecto->getId()] = $objecto->getId().' - '.$gi->getVessel()->getName().' - '. $record->getTime('H:i').' - '.$record->getCode();
    }
    return $resultados;
  }
  
  public static function getBySpecie($specie_id){  
    $c = new Criteria();
    $c->add(SightingPeer::SPECIE_ID, $specie_id, Criteria::EQUAL);
    $c->addAscendingOrderByColumn(SightingPeer::ID);
    return SightingPeer::doSelect($c);
  }

  public static function retrieveByRecordId($id){
    $c = new Criteria();
    $c->add(SightingPeer::RECORD_ID, $id, Criteria::EQUAL);
    return SightingPeer::doSelectOne($c);
  }
  
  public static function getBasicCriteriaWithFilters() {
    $c = new Criteria();
    $c->addJoin(SightingPeer::RECORD_ID, RecordPeer::ID, Criteria::JOIN);
    $c->addJoin(RecordPeer::GENERAL_INFO_ID, GeneralInfoPeer::ID, Criteria::JOIN);
    $c->addAnd(RecordPeer::CODE_ID, array(3, 6), Criteria::IN);
    $c->addAnd(SightingPeer::SPECIE_ID, null, Criteria::ISNOTNULL);
    $c->addAnd(SightingPeer::SPECIE_ID, 0, Criteria::NOT_EQUAL);
    return $c;  
  }
  
  public static function getCriteriaWithFilters($request) {
    $c = SightingPeer::getBasicCriteriaWithFilters();

    if($request->getParameter('company_id'))
    {
      $c->addAnd(GeneralInfoPeer::COMPANY_ID, $request->getParameter('company_id'));
    }
    if($request->getParameter('sea_state_id'))
    {
      $c->addAnd(RecordPeer::SEA_STATE_ID, $request->getParameter('sea_state_id'));
    }
    
    if($request->getParameter('visibility_id'))
    {
      $c->addAnd(RecordPeer::VISIBILITY_ID, $request->getParameter('visibility_id'));
    }
    
    if($request->getParameter('association_id'))
    {
      $c->addAnd(SightingPeer::ASSOCIATION_ID, $request->getParameter('association_id'));
    }
    
    if($request->getParameter('behaviour_id'))
    {
      $c->addAnd(SightingPeer::BEHAVIOUR_ID, $request->getParameter('behaviour_id'));
    }
    
    if($request->getParameter('environment') == 'backend')
    {
      if(intVal($request->getParameter('valid')) != -1){
        $c->addAnd(GeneralInfoPeer::VALID, intVal($request->getParameter('valid')), Criteria::LIKE);
      }
    }
    else
    {
      $c->addAnd(GeneralInfoPeer::VALID, 1, Criteria::LIKE);
    }
    
    $c->addAscendingOrderByColumn(SightingPeer::ID);
    
    return $c;
  }
  
  public static function getForMap($request) 
  {
    $date1 = $request->getParameter('year')."-";
    $date2 = $request->getParameter('year')."-";  
    if ($request->getParameter('month')) {
        $date1 .= $request->getParameter('month')."-1";
        $date2 .= $request->getParameter('month')."-" . idate('d', mktime(0, 0, 0, ($request->getParameter('month') + 1), 0, $request->getParameter('year'))); 
    } else {
        $date1 .= "1-1";
        $date2 .= "12-31";
    }
    
    $c = SightingPeer::getCriteriaWithFilters($request);
    $c->addAnd(RecordPeer::LATITUDE, null, Criteria::ISNOTNULL);
    $c->addAnd(RecordPeer::LONGITUDE, null, Criteria::ISNOTNULL);
    $c->addAnd(RecordPeer::LATITUDE, '', Criteria::NOT_EQUAL);
    $c->addAnd(RecordPeer::LONGITUDE, '', Criteria::NOT_EQUAL);
    $c->addAnd(SightingPeer::SPECIE_ID, $request->getParameter('specie_id'), Criteria::EQUAL);
    $c->addAnd(GeneralInfoPeer::DATE, $date1, Criteria::GREATER_EQUAL);
    $c->addAnd(GeneralInfoPeer::DATE, $date2, Criteria::LESS_EQUAL);
    return SightingPeer::doSelect($c);
  }
  
  public static function getForAPUETotals($request) 
  {
    $c = SightingPeer::getCriteriaWithFilters($request);
    return SightingPeer::doSelect($c);
  }
  
  public static function getChartsCriteria($type, $year, $month) {
    $date1 = $year."-";
    $date2 = $year."-";  
    if (($type == 1) && $month) {
        $date1 .= $month."-1";
        $date2 .= $month."-" . idate('d', mktime(0, 0, 0, ($month + 1), 0, $year)); 
    } else {
        $date1 .= "1-1";
        $date2 .= "12-31";
    }
    $c = SightingPeer::getBasicCriteriaWithFilters();
    $c->addAnd(GeneralInfoPeer::VALID, true, Criteria::EQUAL);
    $c->addAnd(GeneralInfoPeer::DATE, $date1, Criteria::GREATER_EQUAL);
    $c->addAnd(GeneralInfoPeer::DATE, $date2, Criteria::LESS_EQUAL);
    return $c;
  }
  
  public static function getAPUETotals($year, $month){
    if( !$month || $month == 0 ){
      $dateBegin = $year.'-01-01';
      $dateEnd = ($year+1).'-01-01';
    } else {
      $dateBegin = $year.'-'.$month.'-01';
      $dateEnd = $year.'-'.($month+1).'-01';
      if($month==12){
        $dateEnd = ($year+1).'-01-01';
      }
    }

    $query = SightingQuery::create()
      ->where('Sighting.SpecieId IS NOT NULL')
      ->filterBySpecieId(0, Criteria::NOT_EQUAL)
      ->useRecordQuery()
        ->filterByCodeId(array(3, 6), Criteria::IN)
        ->useGeneralInfoQuery()
          ->filterByValid(true)
          ->filterByDate($dateBegin, Criteria::GREATER_EQUAL)
          ->filterByDate($dateEnd, Criteria::LESS_THAN)
        ->endUse()
      ->endUse()
      ->distinct()
      ->setFormatter(ModelCriteria::FORMAT_ON_DEMAND)
      ->find();
    return $query;
  }

// I didn't removed, just in case ...
//  public static function getAPUETotals($year, $month) {
//    $c = SightingPeer::getChartsCriteria(1, $year, $month);
//    $c->addGroupByColumn(SightingPeer::SPECIE_ID);
//    $c->addSelectColumn('count(distinct '.GeneralInfoPeer::ID.') as total');
//    $c->addSelectColumn(SightingPeer::SPECIE_ID);
//    $c->addAscendingOrderByColumn('total');
//
//    return BasePeer::doSelect($c);
//  }

  public static function getAPUEVariations($year) {
    $date1 = $year."-1-1";
    $date2 = $year."-12-31";  

    $query = SightingQuery::create()
      ->where('Sighting.SpecieId IS NOT NULL')
      ->filterBySpecieId(0, Criteria::NOT_EQUAL)
      ->useRecordQuery()
        ->filterByCodeId(array(3, 6), Criteria::IN)
        ->useGeneralInfoQuery()
          ->filterByValid(true)
          ->filterByDate($date1, Criteria::GREATER_EQUAL)
          ->filterByDate($date2, Criteria::LESS_EQUAL)
        ->endUse()
      ->endUse()
      ->distinct()
      ->setFormatter(ModelCriteria::FORMAT_ON_DEMAND)
      ->find();
    return $query;
    
    //return BasePeer::doSelect($c);
  }
  
// I didn't removed, just in case ...
//  public static function getAPUEVariations($year) {
//    $c = SightingPeer::getChartsCriteria(2, $year, 0);
//    $c->addGroupByColumn('month('.GeneralInfoPeer::DATE.')');
//    $c->addGroupByColumn(SightingPeer::SPECIE_ID);
//    $c->addSelectColumn('count(distinct '.GeneralInfoPeer::ID.') as total');
//    $c->addSelectColumn('month('.GeneralInfoPeer::DATE.') as month');
//    $c->addSelectColumn(SightingPeer::SPECIE_ID);
//
//    return BasePeer::doSelect($c);
//  }
  
  public static function getMonthChartTotals($year, $month) {
    $c = SightingPeer::getChartsCriteria(1, $year, $month);
    $c->addGroupByColumn(SightingPeer::SPECIE_ID);
    $c->addSelectColumn('count(distinct '.GeneralInfoPeer::ID.') as total');
    $c->addSelectColumn(SightingPeer::SPECIE_ID);
    
    return BasePeer::doSelect($c);
      
  }
  
  public static function getByGeneralInfoId($request){
    $c = SightingPeer::getCriteriaWithFilters($request);
    $c->addAnd(RecordPeer::LATITUDE, null, Criteria::ISNOTNULL);
    $c->addAnd(RecordPeer::LONGITUDE, null, Criteria::ISNOTNULL);
    $c->addAnd(RecordPeer::LATITUDE, '', Criteria::NOT_EQUAL);
    $c->addAnd(RecordPeer::LONGITUDE, '', Criteria::NOT_EQUAL);
    $c->addAnd(GeneralInfoPeer::ID, $request->getParameter('general_info_id'), Criteria::EQUAL);
    $c->addAscendingOrderByColumn(SightingPeer::SPECIE_ID);
    return SightingPeer::doSelect($c);
  }

  public static function getByGeneralInfoIdForMap($request){
    $c = SightingPeer::getBasicCriteriaWithFilters();
    $c->addAnd(RecordPeer::LATITUDE, null, Criteria::ISNOTNULL);
    $c->addAnd(RecordPeer::LONGITUDE, null, Criteria::ISNOTNULL);
    $c->addAnd(RecordPeer::LATITUDE, '', Criteria::NOT_EQUAL);
    $c->addAnd(RecordPeer::LONGITUDE, '', Criteria::NOT_EQUAL);
    $c->add(GeneralInfoPeer::ID, $request->getParameter('general_info_id'), Criteria::EQUAL);
    $c->addAscendingOrderByColumn(SightingPeer::SPECIE_ID);
    return SightingPeer::doSelect($c);
  }

} // SightingPeer

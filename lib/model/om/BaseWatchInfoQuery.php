<?php


/**
 * Base class that represents a query for the 'watch_info' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.0-dev on:
 *
 * Mon Nov 14 16:36:13 2011
 *
 * @method     WatchInfoQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     WatchInfoQuery orderByCode($order = Criteria::ASC) Order by the code column
 * @method     WatchInfoQuery orderByWatchPostId($order = Criteria::ASC) Order by the watch_post_id column
 * @method     WatchInfoQuery orderByWatchmanId($order = Criteria::ASC) Order by the watchman_id column
 * @method     WatchInfoQuery orderByCompanyId($order = Criteria::ASC) Order by the company_id column
 * @method     WatchInfoQuery orderByBaseLatitude($order = Criteria::ASC) Order by the base_latitude column
 * @method     WatchInfoQuery orderByBaseLongitude($order = Criteria::ASC) Order by the base_longitude column
 * @method     WatchInfoQuery orderByDate($order = Criteria::ASC) Order by the date column
 * @method     WatchInfoQuery orderByValid($order = Criteria::ASC) Order by the valid column
 * @method     WatchInfoQuery orderByComments($order = Criteria::ASC) Order by the comments column
 * @method     WatchInfoQuery orderByCreatedBy($order = Criteria::ASC) Order by the created_by column
 * @method     WatchInfoQuery orderByUpdatedBy($order = Criteria::ASC) Order by the updated_by column
 * @method     WatchInfoQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method     WatchInfoQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 *
 * @method     WatchInfoQuery groupById() Group by the id column
 * @method     WatchInfoQuery groupByCode() Group by the code column
 * @method     WatchInfoQuery groupByWatchPostId() Group by the watch_post_id column
 * @method     WatchInfoQuery groupByWatchmanId() Group by the watchman_id column
 * @method     WatchInfoQuery groupByCompanyId() Group by the company_id column
 * @method     WatchInfoQuery groupByBaseLatitude() Group by the base_latitude column
 * @method     WatchInfoQuery groupByBaseLongitude() Group by the base_longitude column
 * @method     WatchInfoQuery groupByDate() Group by the date column
 * @method     WatchInfoQuery groupByValid() Group by the valid column
 * @method     WatchInfoQuery groupByComments() Group by the comments column
 * @method     WatchInfoQuery groupByCreatedBy() Group by the created_by column
 * @method     WatchInfoQuery groupByUpdatedBy() Group by the updated_by column
 * @method     WatchInfoQuery groupByCreatedAt() Group by the created_at column
 * @method     WatchInfoQuery groupByUpdatedAt() Group by the updated_at column
 *
 * @method     WatchInfo findOne(PropelPDO $con = null) Return the first WatchInfo matching the query
 * @method     WatchInfo findOneById(int $id) Return the first WatchInfo filtered by the id column
 * @method     WatchInfo findOneByCode(string $code) Return the first WatchInfo filtered by the code column
 * @method     WatchInfo findOneByWatchPostId(int $watch_post_id) Return the first WatchInfo filtered by the watch_post_id column
 * @method     WatchInfo findOneByWatchmanId(int $watchman_id) Return the first WatchInfo filtered by the watchman_id column
 * @method     WatchInfo findOneByCompanyId(int $company_id) Return the first WatchInfo filtered by the company_id column
 * @method     WatchInfo findOneByBaseLatitude(string $base_latitude) Return the first WatchInfo filtered by the base_latitude column
 * @method     WatchInfo findOneByBaseLongitude(string $base_longitude) Return the first WatchInfo filtered by the base_longitude column
 * @method     WatchInfo findOneByDate(string $date) Return the first WatchInfo filtered by the date column
 * @method     WatchInfo findOneByValid(boolean $valid) Return the first WatchInfo filtered by the valid column
 * @method     WatchInfo findOneByComments(string $comments) Return the first WatchInfo filtered by the comments column
 * @method     WatchInfo findOneByCreatedBy(int $created_by) Return the first WatchInfo filtered by the created_by column
 * @method     WatchInfo findOneByUpdatedBy(int $updated_by) Return the first WatchInfo filtered by the updated_by column
 * @method     WatchInfo findOneByCreatedAt(string $created_at) Return the first WatchInfo filtered by the created_at column
 * @method     WatchInfo findOneByUpdatedAt(string $updated_at) Return the first WatchInfo filtered by the updated_at column
 *
 * @method     array findById(int $id) Return WatchInfo objects filtered by the id column
 * @method     array findByCode(string $code) Return WatchInfo objects filtered by the code column
 * @method     array findByWatchPostId(int $watch_post_id) Return WatchInfo objects filtered by the watch_post_id column
 * @method     array findByWatchmanId(int $watchman_id) Return WatchInfo objects filtered by the watchman_id column
 * @method     array findByCompanyId(int $company_id) Return WatchInfo objects filtered by the company_id column
 * @method     array findByBaseLatitude(string $base_latitude) Return WatchInfo objects filtered by the base_latitude column
 * @method     array findByBaseLongitude(string $base_longitude) Return WatchInfo objects filtered by the base_longitude column
 * @method     array findByDate(string $date) Return WatchInfo objects filtered by the date column
 * @method     array findByValid(boolean $valid) Return WatchInfo objects filtered by the valid column
 * @method     array findByComments(string $comments) Return WatchInfo objects filtered by the comments column
 * @method     array findByCreatedBy(int $created_by) Return WatchInfo objects filtered by the created_by column
 * @method     array findByUpdatedBy(int $updated_by) Return WatchInfo objects filtered by the updated_by column
 * @method     array findByCreatedAt(string $created_at) Return WatchInfo objects filtered by the created_at column
 * @method     array findByUpdatedAt(string $updated_at) Return WatchInfo objects filtered by the updated_at column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseWatchInfoQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BaseWatchInfoQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'WatchInfo', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ($this->getFormatter()->isObjectFormatter() && (null !== ($obj = WatchInfoPeer::getInstanceFromPool((string) $key)))) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			return $this
				->filterByPrimaryKey($key)
				->findOne($con);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{	
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    WatchInfoQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(WatchInfoPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    WatchInfoQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(WatchInfoPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * @param     int|array $id The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 *
	 * @return    WatchInfoQuery The current query, for fluid interface
	 */
	public function filterById($id = null)
	{
		if (is_array($id)) {
			return $this->addUsingAlias(WatchInfoPeer::ID, $id, Criteria::IN);
		} else {
			return $this->addUsingAlias(WatchInfoPeer::ID, $id, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the code column
	 * 
	 * @param     string $code The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    WatchInfoQuery The current query, for fluid interface
	 */
	public function filterByCode($code = null)
	{
		if(preg_match('/[\%\*]/', $code)) {
			return $this->addUsingAlias(WatchInfoPeer::CODE, str_replace('*', '%', $code), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(WatchInfoPeer::CODE, $code, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the watch_post_id column
	 * 
	 * @param     int|array $watch_post_id The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 *
	 * @return    WatchInfoQuery The current query, for fluid interface
	 */
	public function filterByWatchPostId($watchPostId = null)
	{
		if (is_array($watchPostId)) {
			if (array_values($watchPostId) === $watchPostId) {
				return $this->addUsingAlias(WatchInfoPeer::WATCH_POST_ID, $watchPostId, Criteria::IN);
			} else {
				if (isset($watchPostId['min'])) {
					$this->addUsingAlias(WatchInfoPeer::WATCH_POST_ID, $watchPostId['min'], Criteria::GREATER_EQUAL);
				}
				if (isset($watchPostId['max'])) {
					$this->addUsingAlias(WatchInfoPeer::WATCH_POST_ID, $watchPostId['max'], Criteria::LESS_EQUAL);
				}
				return $this;	
			}
		} else {
			return $this->addUsingAlias(WatchInfoPeer::WATCH_POST_ID, $watchPostId, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the watchman_id column
	 * 
	 * @param     int|array $watchman_id The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 *
	 * @return    WatchInfoQuery The current query, for fluid interface
	 */
	public function filterByWatchmanId($watchmanId = null)
	{
		if (is_array($watchmanId)) {
			if (array_values($watchmanId) === $watchmanId) {
				return $this->addUsingAlias(WatchInfoPeer::WATCHMAN_ID, $watchmanId, Criteria::IN);
			} else {
				if (isset($watchmanId['min'])) {
					$this->addUsingAlias(WatchInfoPeer::WATCHMAN_ID, $watchmanId['min'], Criteria::GREATER_EQUAL);
				}
				if (isset($watchmanId['max'])) {
					$this->addUsingAlias(WatchInfoPeer::WATCHMAN_ID, $watchmanId['max'], Criteria::LESS_EQUAL);
				}
				return $this;	
			}
		} else {
			return $this->addUsingAlias(WatchInfoPeer::WATCHMAN_ID, $watchmanId, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the company_id column
	 * 
	 * @param     int|array $company_id The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 *
	 * @return    WatchInfoQuery The current query, for fluid interface
	 */
	public function filterByCompanyId($companyId = null)
	{
		if (is_array($companyId)) {
			if (array_values($companyId) === $companyId) {
				return $this->addUsingAlias(WatchInfoPeer::COMPANY_ID, $companyId, Criteria::IN);
			} else {
				if (isset($companyId['min'])) {
					$this->addUsingAlias(WatchInfoPeer::COMPANY_ID, $companyId['min'], Criteria::GREATER_EQUAL);
				}
				if (isset($companyId['max'])) {
					$this->addUsingAlias(WatchInfoPeer::COMPANY_ID, $companyId['max'], Criteria::LESS_EQUAL);
				}
				return $this;	
			}
		} else {
			return $this->addUsingAlias(WatchInfoPeer::COMPANY_ID, $companyId, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the base_latitude column
	 * 
	 * @param     string $base_latitude The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    WatchInfoQuery The current query, for fluid interface
	 */
	public function filterByBaseLatitude($baseLatitude = null)
	{
		if(preg_match('/[\%\*]/', $baseLatitude)) {
			return $this->addUsingAlias(WatchInfoPeer::BASE_LATITUDE, str_replace('*', '%', $baseLatitude), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(WatchInfoPeer::BASE_LATITUDE, $baseLatitude, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the base_longitude column
	 * 
	 * @param     string $base_longitude The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    WatchInfoQuery The current query, for fluid interface
	 */
	public function filterByBaseLongitude($baseLongitude = null)
	{
		if(preg_match('/[\%\*]/', $baseLongitude)) {
			return $this->addUsingAlias(WatchInfoPeer::BASE_LONGITUDE, str_replace('*', '%', $baseLongitude), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(WatchInfoPeer::BASE_LONGITUDE, $baseLongitude, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the date column
	 * 
	 * @param     string|array $date The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 *
	 * @return    WatchInfoQuery The current query, for fluid interface
	 */
	public function filterByDate($date = null)
	{
		if (is_array($date)) {
			if (array_values($date) === $date) {
				return $this->addUsingAlias(WatchInfoPeer::DATE, $date, Criteria::IN);
			} else {
				if (isset($date['min'])) {
					$this->addUsingAlias(WatchInfoPeer::DATE, $date['min'], Criteria::GREATER_EQUAL);
				}
				if (isset($date['max'])) {
					$this->addUsingAlias(WatchInfoPeer::DATE, $date['max'], Criteria::LESS_EQUAL);
				}
				return $this;	
			}
		} else {
			return $this->addUsingAlias(WatchInfoPeer::DATE, $date, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the valid column
	 * 
	 * @param     boolean|string $valid The value to use as filter.
	 *            Accepts strings ('false', 'off', '-', 'no', 'n', and '0' are false, the rest is true)
	 *
	 * @return    WatchInfoQuery The current query, for fluid interface
	 */
	public function filterByValid($valid = null)
	{
		if(is_string($valid)) {
			$valid = in_array(strtolower($valid), array('false', 'off', '-', 'no', 'n', '0')) ? false : true;
		}
		return $this->addUsingAlias(WatchInfoPeer::VALID, $valid, Criteria::EQUAL);
	}

	/**
	 * Filter the query on the comments column
	 * 
	 * @param     string $comments The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    WatchInfoQuery The current query, for fluid interface
	 */
	public function filterByComments($comments = null)
	{
		if(preg_match('/[\%\*]/', $comments)) {
			return $this->addUsingAlias(WatchInfoPeer::COMMENTS, str_replace('*', '%', $comments), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(WatchInfoPeer::COMMENTS, $comments, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the created_by column
	 * 
	 * @param     int|array $created_by The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 *
	 * @return    WatchInfoQuery The current query, for fluid interface
	 */
	public function filterByCreatedBy($createdBy = null)
	{
		if (is_array($createdBy)) {
			if (array_values($createdBy) === $createdBy) {
				return $this->addUsingAlias(WatchInfoPeer::CREATED_BY, $createdBy, Criteria::IN);
			} else {
				if (isset($createdBy['min'])) {
					$this->addUsingAlias(WatchInfoPeer::CREATED_BY, $createdBy['min'], Criteria::GREATER_EQUAL);
				}
				if (isset($createdBy['max'])) {
					$this->addUsingAlias(WatchInfoPeer::CREATED_BY, $createdBy['max'], Criteria::LESS_EQUAL);
				}
				return $this;	
			}
		} else {
			return $this->addUsingAlias(WatchInfoPeer::CREATED_BY, $createdBy, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the updated_by column
	 * 
	 * @param     int|array $updated_by The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 *
	 * @return    WatchInfoQuery The current query, for fluid interface
	 */
	public function filterByUpdatedBy($updatedBy = null)
	{
		if (is_array($updatedBy)) {
			if (array_values($updatedBy) === $updatedBy) {
				return $this->addUsingAlias(WatchInfoPeer::UPDATED_BY, $updatedBy, Criteria::IN);
			} else {
				if (isset($updatedBy['min'])) {
					$this->addUsingAlias(WatchInfoPeer::UPDATED_BY, $updatedBy['min'], Criteria::GREATER_EQUAL);
				}
				if (isset($updatedBy['max'])) {
					$this->addUsingAlias(WatchInfoPeer::UPDATED_BY, $updatedBy['max'], Criteria::LESS_EQUAL);
				}
				return $this;	
			}
		} else {
			return $this->addUsingAlias(WatchInfoPeer::UPDATED_BY, $updatedBy, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the created_at column
	 * 
	 * @param     string|array $created_at The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 *
	 * @return    WatchInfoQuery The current query, for fluid interface
	 */
	public function filterByCreatedAt($createdAt = null)
	{
		if (is_array($createdAt)) {
			if (array_values($createdAt) === $createdAt) {
				return $this->addUsingAlias(WatchInfoPeer::CREATED_AT, $createdAt, Criteria::IN);
			} else {
				if (isset($createdAt['min'])) {
					$this->addUsingAlias(WatchInfoPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
				}
				if (isset($createdAt['max'])) {
					$this->addUsingAlias(WatchInfoPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
				}
				return $this;	
			}
		} else {
			return $this->addUsingAlias(WatchInfoPeer::CREATED_AT, $createdAt, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the updated_at column
	 * 
	 * @param     string|array $updated_at The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 *
	 * @return    WatchInfoQuery The current query, for fluid interface
	 */
	public function filterByUpdatedAt($updatedAt = null)
	{
		if (is_array($updatedAt)) {
			if (array_values($updatedAt) === $updatedAt) {
				return $this->addUsingAlias(WatchInfoPeer::UPDATED_AT, $updatedAt, Criteria::IN);
			} else {
				if (isset($updatedAt['min'])) {
					$this->addUsingAlias(WatchInfoPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
				}
				if (isset($updatedAt['max'])) {
					$this->addUsingAlias(WatchInfoPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
				}
				return $this;	
			}
		} else {
			return $this->addUsingAlias(WatchInfoPeer::UPDATED_AT, $updatedAt, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query by a related WatchPost object
	 *
	 * @param     WatchPost $watchPost  the related object to use as filter
	 *
	 * @return    WatchInfoQuery The current query, for fluid interface
	 */
	public function filterByWatchPost($watchPost)
	{
		return $this
			->addUsingAlias(WatchInfoPeer::WATCH_POST_ID, $watchPost->getId(), Criteria::EQUAL);
	}

	/**
	 * Use the WatchPost relation WatchPost object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    WatchPostQuery A secondary query class using the current class as primary query
	 */
	public function useWatchPostQuery($relationAlias = '', $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->join('WatchPost' . ($relationAlias ? ' ' . $relationAlias : ''), $joinType)
			->useQuery($relationAlias ? $relationAlias : 'WatchPost', 'WatchPostQuery');
	}

	/**
	 * Filter the query by a related Watchman object
	 *
	 * @param     Watchman $watchman  the related object to use as filter
	 *
	 * @return    WatchInfoQuery The current query, for fluid interface
	 */
	public function filterByWatchman($watchman)
	{
		return $this
			->addUsingAlias(WatchInfoPeer::WATCHMAN_ID, $watchman->getId(), Criteria::EQUAL);
	}

	/**
	 * Use the Watchman relation Watchman object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    WatchmanQuery A secondary query class using the current class as primary query
	 */
	public function useWatchmanQuery($relationAlias = '', $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->join('Watchman' . ($relationAlias ? ' ' . $relationAlias : ''), $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Watchman', 'WatchmanQuery');
	}

	/**
	 * Filter the query by a related Company object
	 *
	 * @param     Company $company  the related object to use as filter
	 *
	 * @return    WatchInfoQuery The current query, for fluid interface
	 */
	public function filterByCompany($company)
	{
		return $this
			->addUsingAlias(WatchInfoPeer::COMPANY_ID, $company->getId(), Criteria::EQUAL);
	}

	/**
	 * Use the Company relation Company object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    CompanyQuery A secondary query class using the current class as primary query
	 */
	public function useCompanyQuery($relationAlias = '', $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->join('Company' . ($relationAlias ? ' ' . $relationAlias : ''), $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Company', 'CompanyQuery');
	}

	/**
	 * Filter the query by a related sfGuardUser object
	 *
	 * @param     sfGuardUser $sfGuardUser  the related object to use as filter
	 *
	 * @return    WatchInfoQuery The current query, for fluid interface
	 */
	public function filterBysfGuardUserRelatedByCreatedBy($sfGuardUser)
	{
		return $this
			->addUsingAlias(WatchInfoPeer::CREATED_BY, $sfGuardUser->getId(), Criteria::EQUAL);
	}

	/**
	 * Use the sfGuardUserRelatedByCreatedBy relation sfGuardUser object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    sfGuardUserQuery A secondary query class using the current class as primary query
	 */
	public function usesfGuardUserRelatedByCreatedByQuery($relationAlias = '', $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->join('sfGuardUserRelatedByCreatedBy' . ($relationAlias ? ' ' . $relationAlias : ''), $joinType)
			->useQuery($relationAlias ? $relationAlias : 'sfGuardUserRelatedByCreatedBy', 'sfGuardUserQuery');
	}

	/**
	 * Filter the query by a related sfGuardUser object
	 *
	 * @param     sfGuardUser $sfGuardUser  the related object to use as filter
	 *
	 * @return    WatchInfoQuery The current query, for fluid interface
	 */
	public function filterBysfGuardUserRelatedByUpdatedBy($sfGuardUser)
	{
		return $this
			->addUsingAlias(WatchInfoPeer::UPDATED_BY, $sfGuardUser->getId(), Criteria::EQUAL);
	}

	/**
	 * Use the sfGuardUserRelatedByUpdatedBy relation sfGuardUser object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    sfGuardUserQuery A secondary query class using the current class as primary query
	 */
	public function usesfGuardUserRelatedByUpdatedByQuery($relationAlias = '', $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->join('sfGuardUserRelatedByUpdatedBy' . ($relationAlias ? ' ' . $relationAlias : ''), $joinType)
			->useQuery($relationAlias ? $relationAlias : 'sfGuardUserRelatedByUpdatedBy', 'sfGuardUserQuery');
	}

	/**
	 * Filter the query by a related WatchSighting object
	 *
	 * @param     WatchSighting $watchSighting  the related object to use as filter
	 *
	 * @return    WatchInfoQuery The current query, for fluid interface
	 */
	public function filterByWatchSighting($watchSighting)
	{
		return $this
			->addUsingAlias(WatchInfoPeer::ID, $watchSighting->getWatchInfoId(), Criteria::EQUAL);
	}

	/**
	 * Use the WatchSighting relation WatchSighting object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    WatchSightingQuery A secondary query class using the current class as primary query
	 */
	public function useWatchSightingQuery($relationAlias = '', $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->join('WatchSighting' . ($relationAlias ? ' ' . $relationAlias : ''), $joinType)
			->useQuery($relationAlias ? $relationAlias : 'WatchSighting', 'WatchSightingQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     WatchInfo $watchInfo Object to remove from the list of results
	 *
	 * @return    WatchInfoQuery The current query, for fluid interface
	 */
	public function prune($watchInfo = null)
	{
		if ($watchInfo) {
			$this->addUsingAlias(WatchInfoPeer::ID, $watchInfo->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

	/**
	 * Code to execute before every SELECT statement
	 * 
	 * @param     PropelPDO $con The connection object used by the query
	 */
	protected function basePreSelect(PropelPDO $con)
	{
		return $this->preSelect($con);
	}

	/**
	 * Code to execute before every DELETE statement
	 * 
	 * @param     PropelPDO $con The connection object used by the query
	 */
	protected function basePreDelete(PropelPDO $con)
	{
		return $this->preDelete($con);
	}

	/**
	 * Code to execute before every UPDATE statement
	 * 
	 * @param     array $values The associatiove array of columns and values for the update
	 * @param     PropelPDO $con The connection object used by the query
	 */
	protected function basePreUpdate(&$values, PropelPDO $con)
	{
		return $this->preUpdate($values, $con);
	}

} // BaseWatchInfoQuery

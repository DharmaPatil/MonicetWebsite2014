<?php


/**
 * Base class that represents a query for the 'profile' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.0-dev on:
 *
 * Tue Mar  9 10:32:18 2010
 *
 * @method     ProfileQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     ProfileQuery orderBySlug($order = Criteria::ASC) Order by the slug column
 * @method     ProfileQuery orderByName($order = Criteria::ASC) Order by the name column
 * @method     ProfileQuery orderByPhoto($order = Criteria::ASC) Order by the photo column
 * @method     ProfileQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method     ProfileQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 *
 * @method     ProfileQuery groupById() Group by the id column
 * @method     ProfileQuery groupBySlug() Group by the slug column
 * @method     ProfileQuery groupByName() Group by the name column
 * @method     ProfileQuery groupByPhoto() Group by the photo column
 * @method     ProfileQuery groupByCreatedAt() Group by the created_at column
 * @method     ProfileQuery groupByUpdatedAt() Group by the updated_at column
 *
 * @method     Profile findOne(PropelPDO $con = null) Return the first Profile matching the query
 * @method     Profile findOneById(int $id) Return the first Profile filtered by the id column
 * @method     Profile findOneBySlug(string $slug) Return the first Profile filtered by the slug column
 * @method     Profile findOneByName(string $name) Return the first Profile filtered by the name column
 * @method     Profile findOneByPhoto(string $photo) Return the first Profile filtered by the photo column
 * @method     Profile findOneByCreatedAt(string $created_at) Return the first Profile filtered by the created_at column
 * @method     Profile findOneByUpdatedAt(string $updated_at) Return the first Profile filtered by the updated_at column
 *
 * @method     array findById(int $id) Return Profile objects filtered by the id column
 * @method     array findBySlug(string $slug) Return Profile objects filtered by the slug column
 * @method     array findByName(string $name) Return Profile objects filtered by the name column
 * @method     array findByPhoto(string $photo) Return Profile objects filtered by the photo column
 * @method     array findByCreatedAt(string $created_at) Return Profile objects filtered by the created_at column
 * @method     array findByUpdatedAt(string $updated_at) Return Profile objects filtered by the updated_at column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseProfileQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BaseProfileQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'Profile', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ($this->getFormatter()->isObjectFormatter() && (null !== ($obj = ProfilePeer::getInstanceFromPool((string) $key)))) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			return $this
				->filterByPrimaryKey($key)
				->findOne($con);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{	
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    ProfileQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(ProfilePeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    ProfileQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(ProfilePeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * @param     int|array $id The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 *
	 * @return    ProfileQuery The current query, for fluid interface
	 */
	public function filterById($id = null)
	{
		if (is_array($id)) {
			return $this->addUsingAlias(ProfilePeer::ID, $id, Criteria::IN);
		} else {
			return $this->addUsingAlias(ProfilePeer::ID, $id, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the slug column
	 * 
	 * @param     string $slug The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    ProfileQuery The current query, for fluid interface
	 */
	public function filterBySlug($slug = null)
	{
		if(preg_match('/[\%\*]/', $slug)) {
			return $this->addUsingAlias(ProfilePeer::SLUG, str_replace('*', '%', $slug), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(ProfilePeer::SLUG, $slug, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the name column
	 * 
	 * @param     string $name The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    ProfileQuery The current query, for fluid interface
	 */
	public function filterByName($name = null)
	{
		if(preg_match('/[\%\*]/', $name)) {
			return $this->addUsingAlias(ProfilePeer::NAME, str_replace('*', '%', $name), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(ProfilePeer::NAME, $name, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the photo column
	 * 
	 * @param     string $photo The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    ProfileQuery The current query, for fluid interface
	 */
	public function filterByPhoto($photo = null)
	{
		if(preg_match('/[\%\*]/', $photo)) {
			return $this->addUsingAlias(ProfilePeer::PHOTO, str_replace('*', '%', $photo), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(ProfilePeer::PHOTO, $photo, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the created_at column
	 * 
	 * @param     string|array $created_at The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 *
	 * @return    ProfileQuery The current query, for fluid interface
	 */
	public function filterByCreatedAt($createdAt = null)
	{
		if (is_array($createdAt)) {
			if (array_values($createdAt) === $createdAt) {
				return $this->addUsingAlias(ProfilePeer::CREATED_AT, $createdAt, Criteria::IN);
			} else {
				if (isset($createdAt['min'])) {
					$this->addUsingAlias(ProfilePeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
				}
				if (isset($createdAt['max'])) {
					$this->addUsingAlias(ProfilePeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
				}
				return $this;	
			}
		} else {
			return $this->addUsingAlias(ProfilePeer::CREATED_AT, $createdAt, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the updated_at column
	 * 
	 * @param     string|array $updated_at The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 *
	 * @return    ProfileQuery The current query, for fluid interface
	 */
	public function filterByUpdatedAt($updatedAt = null)
	{
		if (is_array($updatedAt)) {
			if (array_values($updatedAt) === $updatedAt) {
				return $this->addUsingAlias(ProfilePeer::UPDATED_AT, $updatedAt, Criteria::IN);
			} else {
				if (isset($updatedAt['min'])) {
					$this->addUsingAlias(ProfilePeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
				}
				if (isset($updatedAt['max'])) {
					$this->addUsingAlias(ProfilePeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
				}
				return $this;	
			}
		} else {
			return $this->addUsingAlias(ProfilePeer::UPDATED_AT, $updatedAt, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query by a related ProfileI18n object
	 *
	 * @param     ProfileI18n $profileI18n  the related object to use as filter
	 *
	 * @return    ProfileQuery The current query, for fluid interface
	 */
	public function filterByProfileI18n($profileI18n)
	{
		return $this
			->addUsingAlias(ProfilePeer::ID, $profileI18n->getId(), Criteria::EQUAL);
	}

	/**
	 * Use the ProfileI18n relation ProfileI18n object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ProfileI18nQuery A secondary query class using the current class as primary query
	 */
	public function useProfileI18nQuery($relationAlias = '', $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->join('ProfileI18n' . ($relationAlias ? ' ' . $relationAlias : ''), $joinType)
			->useQuery($relationAlias ? $relationAlias : 'ProfileI18n', 'ProfileI18nQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     Profile $profile Object to remove from the list of results
	 *
	 * @return    ProfileQuery The current query, for fluid interface
	 */
	public function prune($profile = null)
	{
		if ($profile) {
			$this->addUsingAlias(ProfilePeer::ID, $profile->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

	/**
	 * Code to execute before every SELECT statement
	 * 
	 * @param     PropelPDO $con The connection object used by the query
	 */
	protected function basePreSelect(PropelPDO $con)
	{
		return $this->preSelect($con);
	}

	/**
	 * Code to execute before every DELETE statement
	 * 
	 * @param     PropelPDO $con The connection object used by the query
	 */
	protected function basePreDelete(PropelPDO $con)
	{
		return $this->preDelete($con);
	}

	/**
	 * Code to execute before every UPDATE statement
	 * 
	 * @param     array $values The associatiove array of columns and values for the update
	 * @param     PropelPDO $con The connection object used by the query
	 */
	protected function basePreUpdate(&$values, PropelPDO $con)
	{
		return $this->preUpdate($values, $con);
	}

} // BaseProfileQuery

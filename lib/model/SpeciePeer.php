<?php


/**
 * Skeleton subclass for performing query and update operations on the 'specie' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.0 on:
 *
 * Fri Dec 18 17:25:55 2009
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class SpeciePeer extends BaseSpeciePeer {
  public static function getByCode($code){
    $c = new Criteria();
    $c->add(SpeciePeer::CODE, $code);
    $s = SpeciePeer::doSelect($c);
    if (count($s)){
      return $s[0];
    }
    else{
      return false;
    }
    
  }
  
  public static function getByCode2($code){
    return SpecieQuery::create()->filterByCode($code)->findOne();
  }
  
  public static function getAllOrdered(){
    $c = new Criteria();
    $c->setDistinct();
    $c->addJoin(SpeciePeer::ID, SpecieI18nPeer::ID);
    $c->addAscendingOrderByColumn(SpecieI18nPeer::NAME);
    return SpeciePeer::doSelect($c);
  }
  
  public static function getAllOrderedFrontend(){
    $c = new Criteria();
    $c->setDistinct();
    $c->addJoin(SpeciePeer::ID, SpecieI18nPeer::ID);
    $c->addAscendingOrderByColumn(SpecieI18nPeer::NAME);
    $c->addAnd(SpecieI18nPeer::CULTURE, sfContext::getInstance()->getUser()->getCulture(), Criteria::LIKE);
    return SpeciePeer::doSelect($c);
  }
  
  
  /*public static function getSpecieQuery($word){
    
    $c = new Criteria();
    $c->add(SpeciePeer::NAME, '%'.$word.'%', Criteria::LIKE);
    $c->addOr(SpeciePeer::CODE, '%'.$word.'%', Criteria::LIKE);
    $c->setDistinct();
    return SpeciePeer::doSelect($c);
  }*/
  
  public static function getSpecieQuery($id){
    
    $c = new Criteria();
    $c->add(SpeciePeer::ID, $id, Criteria::EQUAL);
    return SpeciePeer::doSelectOne($c);
  }
  
  public static function getSightedSpeciesOnYearAndMonth($year, $month = null, $company_id = 0){
    if( !$month || $month == 0 ){
      $dateBegin = $year.'-01-01';
      $dateEnd = ($year+1).'-01-01';
    } else {
      $dateBegin = $year.'-'.$month.'-01';
      $dateEnd = $year.'-'.($month+1).'-01';
      if($month==12){
        $dateEnd = ($year+1).'-01-01';
      }
    }
    $query = SpecieQuery::create()
            ->useSightingQuery()
              ->useRecordQuery()
                ->useGeneralInfoQuery()
                  ->filterByDate($dateBegin, Criteria::GREATER_EQUAL)
                  ->filterByDate($dateEnd, Criteria::LESS_THAN)
                  ->filterByValid(true)
                ->endUse()
              ->endUse()
            ->endUse()
            ->distinct();
            if ($company_id != 0) {
              $query->where('GeneralInfo.CompanyId = ?', $company_id);
            }
            
    return $query->find();
  }
  
  public static function getForSelectWithIndividuals($with_empty = false, $empty_msg = 'Todas', $empty_code = '', $descLength=null, $lang='pt' ) {
    $objectos = SpecieQuery::create()
            ->useIndividualQuery()
              ->useObservationPhotoQuery()
                ->filterByStatus(ObservationPhoto::V_SIGLA)
              ->endUse()
            ->endUse()
            ->orderByCode()
            ->useSpecieI18nQuery()
              ->orderByName()
            ->endUse()
            ->find();
    
    if($with_empty) {
      return self::fromObjectosToArray($objectos, $empty=true, $empty_msg, $empty_code, $descLength, $lang);
    } 
    return self::fromObjectosToArray($objectos, $empty=false, $empty_msg, $empty_code, $descLength, $lang);
  }
  
  public static function getForSelect($with_empty = false, $empty_msg = 'Todas', $empty_code = '', $descLength=null, $lang='pt' ) {
    $objectos = SpecieQuery::create()->orderByCode()->useSpecieI18nQuery()->orderByName()->endUse()->find();
    
    if($with_empty) {
      return self::fromObjectosToArray($objectos, $empty=true, $empty_msg, $empty_code, $descLength, $lang);
    } 
    return self::fromObjectosToArray($objectos, $empty=false, $empty_msg, $empty_code, $descLength, $lang);
  }
  
  public static function fromObjectosToArray( $objectos, $empty = false, $empty_msg = 'Todas', $empty_code = '', $desLength=null, $lang='pt' ) {
    $resultados = array();
    if( $empty ) {
      $resultados[$empty_code] = '---'.$empty_msg.'---';
    }
    foreach( $objectos as $objecto ) {
      if($desLength) {
        $resultados[$objecto->getId()] = $objecto->getCode().' - '. substr($objecto->getName($lang).' - '.$objecto->getScientificName(), 0, $desLength);
      } else {
        $resultados[$objecto->getId()] = $objecto->getCode().' - '. $objecto->getName($lang).' - '.$objecto->getScientificName();
      }
    }
    return $resultados;
  }
  
  
} // SpeciePeer
